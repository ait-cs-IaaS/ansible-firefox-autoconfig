//preferences here
//---------------------------------------------------------
lockPref('startup.homepage_welcome_url', ''); // No welcome URL
lockPref('browser.startup.homepage_override.mstone', 'ignore'); // No upgrade page
lockPref('browser.rights.override', true); // No rights notification
lockPref('toolkit.telemetry.enabled', false); // No telemetry
lockPref('toolkit.telemetry.prompted', 2); // No telemetry notification
lockPref('datareporting.policy.dataSubmissionPolicyBypassNotification', true); // No share notification
lockPref('datareporting.healthreport.uploadEnabled', false); // Disable health report upload
lockPref('app.update.auto', false); // Don't do automatic updates
lockPref('app.update.enabled', false); // Don't enable updates at all
lockPref('app.update.service.enabled', false); // Don't enable the update service
lockPref('browser.shell.checkDefaultBrowser', false); // Don't check if we are the default browser
lockPref('browser.places.smartBookmarksVersion', -1); // Don't create smart bookmarks
lockPref('general.smoothScroll', false); // Don't do smooth scroll as it results in crashes
lockPref('browser.tabs.remote.autostart', false);
lockPref('browser.tabs.remote.autostart.2', false);

lockPref("intl.accept_languages", "{{ firefox_default_lang }}");
lockPref("browser.search.defaultenginename", "Google");
lockPref("browser.search.defaulturl", "{{ firefox_default_search }}");
lockPref("browser.search.countryCode", "{{ firefox_default_region }}");
lockPref("browser.search.region", "{{ firefox_default_region }}");
lockPref("browser.search.isUS", false);
lockPref("intl.locale.matchOS", false);
lockPref("services.sync.prefs.sync.intl.regional_prefs.use_os_locales", false);
lockPref("browser.send_to_device_locales", "en-GB,en-US,de,es-AR,es-CL,es-ES,es-MX,fr,id,pl,pt-BR,ru,zh-TW");
lockPref("browser.region.update.region", "{{ firefox_default_region }}");
lockPref("doh-rollout.home-region", "{{ firefox_default_region }}");
lockPref("distribution.searchplugins.defaultLocale", "{{ firefox_default_locale }}");
lockPref("general.useragent.locale", "{{ firefox_default_locale }}");

defaultPref('browser.toolbars.bookmarks.visibility', 'always');
defaultPref('browser.bookmarks.addedImportButton', true);
defaultPref('browser.bookmarks.restore_default_bookmarks ', false);
defaultPref(
  'browser.uiCustomization.state',
  '{"placements":{"widget-overflow-fixed-list":[],"nav-bar":["back-button","forward-button","stop-reload-button","customizableui-special-spring1","urlbar-container","customizableui-special-spring2","save-to-pocket-button","downloads-button","fxa-toolbar-menu-button"],"toolbar-menubar":["menubar-items"],"TabsToolbar":["tabbrowser-tabs","new-tab-button","alltabs-button"],"PersonalToolbar":["personal-bookmarks"]},"seen":["save-to-pocket-button","developer-button"],"dirtyAreaCache":["nav-bar","PersonalToolbar","toolbar-menubar","TabsToolbar"],"currentVersion":17,"newElementCount":2}',
);
//---------------------------------------------------------

// utility function to get certificate database
function getCertDB() {
  // get old interface first
  var certdb = Components.classes[
    '@mozilla.org/security/x509certdb;1'
  ].getService(Components.interfaces.nsIX509CertDB);
  var certdb2 = certdb;
  // try to get new interface if possible
  try {
    certdb2 = Components.classes[
      '@mozilla.org/security/x509certdb;1'
    ].getService(Components.interfaces.nsIX509CertDB2);
  } catch (e) {}
  return certdb2;
}

// Add CA certs from provided strings
function addCertStrings(certStrings) {
  if (certStrings) {
    var certdb2 = getCertDB();
    for (var i = 0; i < certStrings.length; i++) {
      let certfile = certStrings[i].replace(/[\r\n]/g, '');
      let BEGIN_CERT = '-----BEGIN CERTIFICATE-----';
      let END_CERT = '-----END CERTIFICATE-----';
      let begin = certfile.indexOf(BEGIN_CERT);
      let end = certfile.indexOf(END_CERT);
      let cert = certfile.substring(begin + BEGIN_CERT.length, end);
      certdb2.addCertFromBase64(cert, 'C,C,C', '');
    }
  }
}

try {

  // observer for default bookmark removal
  var observer = {
    observe: function (subject, topic, data) {},
  };

  // observer for certificates
  var observer2 = {
    observe: function (subject, topic, data) {
      addCertStrings([
            {% for ca_cert in firefox_trusted_certs %}
            `{{ lookup('file', ca_cert) }}`,
            {% endfor %}
        ]);
    },
  };

  Services.obs.addObserver(
    observer,
    'distribution-customization-complete',
    false,
  );
  Services.obs.addObserver(observer2, 'profile-after-change', false);

  //put all prefs or code you only want to run once in here
  if (!getPref('ait.startup.first.done')) {
    //setting startup.page via pref once because defaultPref does not seem to work and lockPref would not allow changing it
    pref('browser.startup.homepage', "{{ firefox_startpage }}");
    //set pref so we wont run the above prefs again
    pref('ait.startup.first.done', true);
  }
} catch (ex) {}
